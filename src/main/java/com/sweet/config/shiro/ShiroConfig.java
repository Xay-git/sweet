package com.sweet.config.shiro;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.apache.shiro.codec.Base64;import org.apache.shiro.mgt.DefaultSecurityManager;import org.apache.shiro.mgt.SecurityManager;import org.apache.shiro.spring.LifecycleBeanPostProcessor;import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.CookieRememberMeManager;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.apache.shiro.web.servlet.SimpleCookie;import org.crazycake.shiro.RedisCacheManager;import org.crazycake.shiro.RedisManager;import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.DependsOn;import java.util.LinkedHashMap;import java.util.Map;/** * 描述： * * @author caojing * @create 2019-01-27-13:38 */@Configurationpublic class ShiroConfig {    @Bean    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) {        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();        // 设置securityManager        shiroFilterFactoryBean.setSecurityManager(securityManager);        // 登录的url        shiroFilterFactoryBean.setLoginUrl("/admin/login");        // 登录成功后跳转的url        shiroFilterFactoryBean.setSuccessUrl("/index");        // 未授权url        shiroFilterFactoryBean.setUnauthorizedUrl("/403");        LinkedHashMap<String, String> filterChainDefinitionMap = new LinkedHashMap<>();        // 定义filterChain，静态资源不拦截        filterChainDefinitionMap.put("/css/**", "anon");        filterChainDefinitionMap.put("/js/**", "anon");        filterChainDefinitionMap.put("/fonts/**", "anon");        filterChainDefinitionMap.put("/img/**", "anon");        // druid数据源监控页面不拦截        filterChainDefinitionMap.put("/druid/**", "anon");        // 配置退出过滤器，其中具体的退出代码Shiro已经替我们实现了        filterChainDefinitionMap.put("/admin/logout", "logout");//        filterChainDefinitionMap.put("/", "anon");        filterChainDefinitionMap.put("/admin/loginSubmit", "anon");        filterChainDefinitionMap.put("/admin/login", "anon");        // 除上以外所有url都必须认证通过才可以访问，未通过认证自动访问LoginUrl        filterChainDefinitionMap.put("/admin/**", "user");        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);        return shiroFilterFactoryBean;    }    @Bean    public SecurityManager securityManager(){        // 配置SecurityManager，并注入shiroRealm        DefaultWebSecurityManager securityManager =  new DefaultWebSecurityManager();        securityManager.setRealm(shiroRealm());        securityManager.setRememberMeManager(rememberMeManager());        securityManager.setCacheManager(cacheManager());        return securityManager;    }    /**     * cookie对象     * @return     */    public SimpleCookie rememberMeCookie() {        // 设置cookie名称，对应login.html页面的<input type="checkbox" name="remember"/>        SimpleCookie cookie = new SimpleCookie("remember");        // 设置cookie的过期时间，单位为秒，这里为一天        cookie.setMaxAge(86400);        return cookie;    }    /**     * cookie管理对象     * @return     */    public CookieRememberMeManager rememberMeManager() {        CookieRememberMeManager cookieRememberMeManager = new CookieRememberMeManager();        cookieRememberMeManager.setCookie(rememberMeCookie());        // rememberMe cookie加密的密钥        cookieRememberMeManager.setCipherKey(Base64.decode("4AvVhmFLUs0KTA3Kprsdag=="));        return cookieRememberMeManager;    }    public RedisManager redisManager() {        RedisManager redisManager = new RedisManager();        return redisManager;    }    /**     * shiro redis缓存     * @return     */    public RedisCacheManager cacheManager() {        RedisCacheManager redisCacheManager = new RedisCacheManager();        redisCacheManager.setRedisManager(redisManager());        return redisCacheManager;    }    @Bean    public ShiroRealm shiroRealm(){        // 配置Realm，需自己实现        ShiroRealm shiroRealm = new ShiroRealm();        return shiroRealm;    }}