package com.sweet.core.shiro;import com.sweet.core.util.SpringContextUtil;import com.sweet.modular.system.entity.Menu;import com.sweet.modular.system.entity.Role;import com.sweet.modular.system.entity.User;import com.sweet.modular.system.mapper.MenuMapper;import com.sweet.modular.system.mapper.RoleMapper;import lombok.extern.slf4j.Slf4j;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authz.AuthorizationException;import org.apache.shiro.authz.UnauthorizedException;import org.apache.shiro.subject.Subject;import org.apache.shiro.web.filter.PathMatchingFilter;import org.apache.shiro.web.util.WebUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import java.util.List;import java.util.Set;import java.util.stream.Collectors;@Slf4j@Componentpublic class URLPathMatchingFilter extends PathMatchingFilter {    @Autowired    MenuMapper menuMapper;    @Autowired    RoleMapper roleMapper;    @Override    protected boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue)            throws Exception {        menuMapper = SpringContextUtil.getApplicationContext().getBean(MenuMapper.class);        roleMapper = SpringContextUtil.getApplicationContext().getBean(RoleMapper.class);        String requestURI = getPathWithinApplication(request);        System.out.println("requestURI:" + requestURI);        Subject subject = SecurityUtils.getSubject();        if (!subject.isAuthenticated()) {            // 如果没有登录, 直接返回true 进入登录流程            WebUtils.issueRedirect(request, response, "/admin/login");            return false;        }        User user = (User) SecurityUtils.getSubject().getPrincipal();        String userName = user.getUserName();        // 获取用户角色集        List<Role> roleList = roleMapper.findRoleByUserName(userName);        Set<String> roleSet = roleList.stream().map(Role::getName).collect(Collectors.toSet());        if(roleSet.contains("admin")){            return true;        }        boolean hasPermission = false;        // 获取用户权限集        List<Menu> permissionList = menuMapper.findMenuByUserName(userName);        Set<String> permissionSet = permissionList.stream().map(Menu::getUrl).collect(Collectors.toSet());        System.out.println("用户" + userName + "的菜单集-----" + permissionSet);        for (String menu : permissionSet) {            if(menu!=null){                if (requestURI.startsWith(menu)) {                    hasPermission = true;                }            }        }        if (hasPermission) {            return true;        } else {            UnauthorizedException ex = new UnauthorizedException("当前用户没有访问路径" + requestURI + "的权限");            subject.getSession().setAttribute("ex",ex);            WebUtils.issueRedirect(request, response, "/unauthorized");            return false;        }    }}